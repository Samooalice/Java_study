package day11;

public class Test01_Field {
/*
 * 	멤버 변수의 초기화
 * 		==> 멤버 변수는 Heap 영역에 생기므로 자동 초기화
 * 			변수에 특정한 값으로 지정할 필요가 생김 Ex) String => null로 초기화 되어있음
 * 
 * 				1. 명시적 초기화
 * 					=> 변수를 선언하면서 데이터 입력
 * 						가장 먼저 실행되는 방법
 * 						Ex) class Test{ int no = 100; }
 * 
 * 				2. 초기화 블럭을 이용한 초기화
 * 					=> 인스턴스 변수에 대해서만 가능한 방법
 * 						두번째 실행되는 방법 - { 이 안에서 데이터를 변수에 입력 }
 * 						Ex).
 * 							class Test{
 * 								int no;
 * 								...
 * 								{
 * 									no = 10;
 * 								}
 * 							}
 * 
 * 				3. Static 블럭을 이용한 초기화
 * 					=> static변수에 한해서만 static블럭 안에서 초기화하는 방법
 * 						class Test{
 * 							static int no;
 * 							String name;
 * 							...
 * 							static{
 * 								no = 10;
 * 							}
 * 						}
 * 				4. 생성자를 이용한 초기화
 *					=> 가장 마지막에 실행되는 방법
 *						class Test{
 *							int no
 *
 *							public Test(){
 *								no = 20000;
 *							}
 *
 *							public Test(int num){
 *								no = num;
 *							}
 *						}
 *
 *
 *	 상속
 *		==> 이미 만들어진 클래스의 기능을 그대로 부여받아
 *			새로운 클래스를 만드는 방법
 *
 *		상속을 통한 소프트웨어의 개발 속도를 빠르게 하기 위한 방법 중 하나.
 *		객체지향에서 매우 중요한 역할을 하는 개념
 *
 *		객체지향 언어는 클래스 단위로 프로그램을 만든 후
 *		클래스를 조립해서 원하는 결과를 얻어냄
 *
 *		클래스를 받았는데 사용자 마음에 들지 않을때
 *		
 *		상속은 자신이 만들고자 하는 클래스와 가장 유사한 부품을 가져와서
 *		내용을 모두 복사한 후
 *			1. 없는 기능은 덧붙여 쓰고
 *			2. 있는 기능 중 바꿀 내용은 바꿔서 사용
 *	
 *	형식
 *		[접근지정자] [속성] class 클래스이름 extends 상속해주는클래스이름(){
 *			//이 내부에는 상속해주는 클래스의 내용이 모두 들어옴
 *		}
 *
 *	참고
 *		==> 상속은 오직 단일 상속만 가능하다.(여러 클래스로부터 동시에 상속받을 수 없음)
 *			오직 한개의 클래스에서 상속받을 수 있다.
 *
 *		Ex)
 *			class NewClass Extends Class1, Class2{ } ==> 안됨
 *
 *	용어
 *		==> 상속 해준 클래스 : 부모클래스, 상위클래스, super class
 *		==> 상속 받은 클래스 : 자식클래스, 하위클래스, sub class
 *
 *		is a ===> 상속 관계에 잇는 클래스를 부르는 용어
 *
 *		class Father{ }			// 		class Son entends Father{ }
 *			--> Son is a Father 가 성립된다.
 *
 *	생성 관계에 있는 경우 생성자의 역할
 *		하위 클래스가 생성되는 순간,
 *		상위 클래스가 자동 생성.
 *		==> 생성 되는 순간 상위 클래스의 생성자도 자동 실행
 *			상위 클래스의 생성자를 자동 호출 할때는 기본 생성자만 이용하게 된다.
 *
 *		***중요
 *		super() : 상위클래스의 특별한 생성자를 강제로 호출하는 명령어
 *			ㅣ 
 *			 ㄴ 1. 반드시 생성자 함수내에서만 호출 가능.
 *				2. 반드시 생성자 내의 첫행 첫 명령으로만 사용 가능.
 *				3.  
 *		
 */
	public Test01_Field() {
		Amoo amoo = new Amoo();
		System.out.println(amoo.toString());
	}

	public static void main(String[] args) {
		new Test01_Field();
	}
}
