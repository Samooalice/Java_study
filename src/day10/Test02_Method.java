package day10;
/*
 * 두 정수를 입력받아 더한 값을 반환해주는 sum함수 제작
 * 랜덤하게 두 수룰 입력해서 더한 결과를 출력
 */
public class Test02_Method {
/*
 * 함수를 제작하는 위치는 클래스블럭 아래에서만
 * 
 * 함수 이유 : 반복적으로 사용되는 코드를 묶어서 활용하기 위함
 */
	public static void main(String[] args) {
		sum(10, 5);
	}

	
	
/* static 속성
 * 	=> 사용할 내용을 미리 static메모리에 올려 둠
 * 		static 멤버로 지정
 * 
 * 	특징 : 프로그래밍이 실행되는 순간 JVM이 로딩되는 순간 저절로 확보되는 영역
 * 			사용자가 특별히 요구하지 않아도 자동적으로 확보되는 영역
 * 			한번 생긴 변수나 함수는 두번다시 생기지 않는다.
 * 
 * 	static 변수
 * 		==> Static영역에 생기는 변수
 * 		형식 
 * 			==> [접근지정자] static 데이터타입 변수이름 = 데이터;	
 *		특징	
 *			==> 여러 객체가 공동으로 사용하는 변수 Static변수는 오직 한개만 올려지기 때문.
 *				***한 오브젝트가 변수의 내용을 바꾸면 다른 오브젝트에서도 변경된 내용을 사용.
 *					=> 해소하기 위해서 'public static final 데이터타입 변수이름'를 통한 상수로 활용
 *				Static변수는 객체의 주소의 의미가 없다.
 *				객체가 없어도 사용할 수 있다.
 *
 *				new시키지 않아도 사용할 수 있는 변수. => 이미 Static 메모리에 올라가 있기 때문.
 *				클래스이름.변수이름
 *
 *
 *	static 함수
 *		==> Static메모리에 미리 올려지는 함수. 객체로 만들어지지 않아도 사용가능.		
 *		사용방법
 *				==> 클래스이름.함수이름();
 *	
 *	*****중요	
 *	Static 함수 내에서는 메모리에 올려져있는 멤버들만 사용할 수 있다.
 *	Static 함수 내에서는 this를 사용할 수 없음.(this는 힙에 생성된 변수만 활용)
 *
 *	this
 *		==> 현재 실행중인 객체의 주소를 기억하는 약속된 변수
 *			JVM이 클래스를 처리하기 위해서 JVM이 사용하는 변수
 *
 *		규칙
 *			=>  모든 멤버는 사용할 떄 앞에 주소가 있어야 한다.
 *				맴버는 클래스 안에 만들어진 변수, 함수를 말한다.
 *				new를 시킨 후 그 주소를 기억시켜 두었다가
 *				그 주소를 이용해서 사용
 *
 *				주소가 없다면, JVM이 자동적으로 this를 붙여줌
 *
 *
 *		this를 개발자가 사용하는 경우 : 지역변수와 전역변수의 이름이 동일한 경우
 *										함수는 지역변수를 우선사용하게 된다.
 *										지역변수가 아닌 멤버변수 접근을 위해서 this를 활용
 */	
	private static int sum(int no1, int no2) {
		int hap = no1 + no2;
		return hap;
	}
}
